name: Build RAEC events json

on:
  workflow_dispatch:
  schedule:
    # Every day at 08:03 AM America/Chicago
    - cron: "3 13 * * *"

permissions:
  contents: write

concurrency:
  group: raec-events-build
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    # ---- JOB-LEVEL ENV (applies to all steps) ----
    env:
      # OPTION A: Use a repo Variable (Settings → Variables → Actions)
      #           Set "IMAP_USER" there to your Gmail address.
      IMAP_USER: ${{ vars.IMAP_USER }}
      # OPTION B: If you don't want to use a repo Variable, uncomment this line:
      # IMAP_USER: raecroominfo.board@gmail.com

      # Where the CSV will be downloaded by fetch_email.js
      OUT_CSV: data/inbox/latest.csv
      # Where the final JSON must live for the web app
      OUT_JSON: events.json
      TZ: America/Chicago

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        run: npm ci

      - name: Ensure data folders exist
        run: |
          mkdir -p data/inbox
          mkdir -p data/tmp

      - name: Debug env (sanity check)
        run: |
          echo "IMAP_USER='$IMAP_USER'"
          if [ -z "$IMAP_USER" ]; then
            echo "IMAP_USER is EMPTY. Set it in Settings → Variables → Actions (name: IMAP_USER) or hardcode it in the workflow env."
            exit 1
          fi

      - name: Fetch latest CSV from Gmail
        env:
          # Pull the Gmail App Password from repo Secrets (Settings → Secrets and variables → Actions → New repository secret)
          IMAP_PASS: ${{ secrets.IMAP_PASS }}
          IMAP_USER: ${{ env.IMAP_USER }}
          OUT_CSV:  ${{ env.OUT_CSV }}
        run: |
          set -e
          node scripts/fetch_email.js
          ls -l "$OUT_CSV" || (echo "No CSV downloaded" && exit 1)

      - name: Transform CSV → events.json
        env:
          IN_CSV:   ${{ env.OUT_CSV }}
          OUT_JSON: ${{ env.OUT_JSON }}
        run: |
          set -e
          node scripts/transform.mjs
          test -s "$OUT_JSON" || (echo "events.json was not written" && exit 1)
          echo "Wrote $(wc -c < $OUT_JSON) bytes to $OUT_JSON"

      - name: Commit events.json (rebase-safe)
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Keep the workspace clean to avoid "cannot pull with rebase" errors
          git reset --hard
          git clean -fdx

          git fetch origin main
          git checkout main
          git pull --rebase origin main

          # Bring in the newly generated events.json from the current workspace
          # (it already exists in the working tree)
          git add events.json

          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "Update events.json [skip ci]"
          git push origin HEAD:main
